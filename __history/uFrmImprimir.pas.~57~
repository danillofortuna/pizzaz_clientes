unit uFrmImprimir;
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  System.Actions, Vcl.ActnList, Vcl.Printers, Vcl.ComCtrls, System.StrUtils;

type
  TfrmImprimir = class(TForm)
    pnl1: TPanel;
    lbl1: TLabel;
    lbl2: TLabel;
    actlst1: TActionList;
    actImp: TAction;
    actCancel: TAction;
    Livre: TMemo;
    procedure btnCancelarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure actImpExecute(Sender: TObject);
    procedure actCancelExecute(Sender: TObject);
    procedure imprimir;
    procedure circularImpressao;
    function criaLinha : string;
    procedure escreverLinha(var F : TextFile; linha : string; qtd : integer);
    function preencheEspacos(linha : string; qtd : integer) : string;
    procedure LivreKeyPress(Sender: TObject; var Key: Char);
  private
    function NomedoComputador: string;
    { Private declarations }
  public

    { Public declarations }
  end;

var
  frmImprimir: TfrmImprimir;

implementation

uses uFrmMasterMenu, uFrmFicha;

{$R *.dfm}


procedure TfrmImprimir.actCancelExecute(Sender: TObject);
begin
  close;
end;

procedure TfrmImprimir.actImpExecute(Sender: TObject);
begin
  imprimir;
end;

procedure TfrmImprimir.btnCancelarClick(Sender: TObject);
begin
  close;
end;

procedure TfrmImprimir.circularImpressao;
begin
//
end;

function TfrmImprimir.criaLinha: string;
var i : Integer;
begin
  for i := 1 to 79 do
  begin
    Result := Result + '-';
  end;
end;

procedure TfrmImprimir.escreverLinha(var F: TextFile; linha: string; qtd : integer);
begin
  linha := preencheEspacos(linha, qtd);
  linha := '| ' + linha;
  linha := linha + ' |';
  writeLn(f, linha);
end;

procedure TfrmImprimir.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  livre.Lines.Clear;
end;

procedure TfrmImprimir.FormShow(Sender: TObject);
begin
  self.Left := Trunc((Screen.WorkAreaWidth - self.Width) / 2);
  self.Top := Trunc((Screen.WorkAreaHeight - self.Height) / 2);
end;

procedure TfrmImprimir.imprimir;

const
  cJustif = #27#97#51;
  cEject = #12;
  { Tamanho da fonte }
  c10cpi = #18;
  c12cpi = #27#77;
  c17cpi = #15;
  cIExpandido = #14;
  cFExpandido = #20;
  { Formatação da fonte }
  cINegrito = #27#71;
  cFNegrito = #27#72;
  cIItalico = #27#52;
  cFItalico = #27#53;
  cTmPagina = #27+char('C');
var
  f: TextFile;
  linha: string;
  i : integer;
  linhas : Integer;
begin
  AssignFile(f, '\\' + NomedoComputador + '\epson');
//  AssignFile(f, 'C:\Users\Ninja\Desktop\teste.txt');
  Rewrite(f);
  write(f,cTmPagina+#33);
  Write(f,c10cpi);
  {
  escreverLinha(f, criaLinha, 76);
  escreverLinha(f, 'PIZZA Z EXPRESS'                                           , 76);
  escreverLinha(f, 'Fone: (62)3292-5674'                                       , 76);
  escreverLinha(f, 'Av. Xerentes Qd 130A Lt 4 - Jardim Balneario Meia Ponte'   , 76);
  escreverLinha(f, criaLinha, 76);
  escreverLinha(f,'',76);
  escreverLinha(f, 'CLIENTE:  '+frmficha.edtnome.text                           , 76);
  escreverLinha(f, 'TELEFONE: '+frmficha.edttelefone.text                      , 76);
  escreverLinha(f, 'ENDERECO: '                                                , 76);

  if(frmFicha.edtsetor.Text <> '')then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtsetor.Text,42)+cFExpandido, 44);

  if(frmFicha.edtrua.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtrua.Text,42)+cFExpandido, 44);

  if(frmFicha.edtquadra.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtquadra.Text,42)+cFExpandido, 44);

  if(frmFicha.edtlote.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtlote.Text,42)+cFExpandido, 44);

  if(frmFicha.edtedificio.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtedificio.Text,42)+cFExpandido, 44);

  if(frmFicha.edtapartamento.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtapartamento.Text,42)+cFExpandido, 44);

  if(frmFicha.edtbloco.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtbloco.Text,42)+cFExpandido, 44);

  if(frmFicha.edtreferencia.text <> '') then
    escreverLinha(f, cIExpandido+preencheEspacos(frmFicha.edtreferencia.Text,42)+cFExpandido, 44);

  escreverLinha(f, criaLinha, 76);
  escreverLinha(f, '', 76);

  linhas := 10;

  for linhas := 0 to 9 do
  begin
    if livre.Lines.Count-1 > linhas then
    begin
      escreverLinha(f, livre.Lines[linhas], 76);
    end
    else
    begin
      escreverLinha(f, '', 76);
    end;
  end;                               }
  escreverLinha(f, cIExpandido+'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX'+cFExpandido, 38);
  escreverLinha(f, criaLinha, 76);
  write(f, #12);
  CloseFile(f);
  close;
end;

procedure TfrmImprimir.LivreKeyPress(Sender: TObject; var Key: Char);
begin
  if (Key > #33) and (Key < #122) then
  begin
   if Livre.Lines[Livre.CaretPos.Y].Length >= 44 then
   begin
     Abort;
   end;
  end;

  if (Key = #13) and (Livre.Lines.Count >= 10) then
  begin
    Abort;
  end;


end;

function TfrmImprimir.NomedoComputador : string;
var
  buffer: array[0..255] of char;
  size: DWord;
begin
  size := 256;
  if GetComputerName(buffer, size) then
    Result := Buffer
  else
    Result := '';
end;

function TfrmImprimir.preencheEspacos(linha: string; qtd : integer): string;
var
  i : integer;
begin
  for I := 1 to qtd do
  begin
    linha := linha + ' ';
  end;
  linha := leftStr(linha, qtd);
  result := linha;
end;

end.

